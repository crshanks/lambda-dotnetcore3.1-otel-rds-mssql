AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample SAM Template for lambda-dotnetcore3.1-otel-rds-mssql

  Plus NR Opentelemetry

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30

Parameters:
  newRelicLicenseKey:
    Type: String
    Description: A New Relic license key.
    NoEcho: true
  newRelicEndpoint:
    Type: String
    Description: New Relic OpenTelemetry endpoint to use.
    Default: otlp.nr-data.net:4317
  mssqlDbEndpoint:
    Type: String
    Description: SQL Server database endpoint.
    NoEcho: true
  mssqlDatabase:
    Type: String
    Description: SQL Server database.
    NoEcho: true
  mssqlUsername:
    Type: String
    Description: SQL Server database username.
    NoEcho: true
  mssqlPassword:
    Type: String
    Description: SQL Server database password.
    NoEcho: true
  subnetId: 
    Description: Array of Subnet IDs
    Type: String
  securityGroupId:
    Description: Array of security group ids
    Type: String

Resources:
  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./src/HelloWorld/
      Handler: HelloWorld::HelloWorld.Function::TracingFunctionHandler
      Runtime: dotnetcore3.1
      Architectures:
        - x86_64
      Environment:
        Variables:
          NEW_RELIC_LICENSE_KEY: !Ref newRelicLicenseKey
          NEW_RELIC_OPENTELEMETRY_ENDPOINT: !Ref newRelicEndpoint
          OTEL_SERVICE_NAME: HelloWorld
          OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /var/task/collector.yaml
          MSSQL_DB_ENDPOINT: !Ref mssqlDbEndpoint
          MSSQL_DATABASE: !Ref mssqlDatabase
          MSSQL_USER: !Ref mssqlUsername
          MSSQL_PASSWORD: !Ref mssqlPassword
      MemorySize: 512
      VpcConfig:
        SecurityGroupIds: 
          - !Ref securityGroupId
        SubnetIds:
          - !Ref subnetId
      Layers:
        # Use this if using x86_64 architecture
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:901920570463:layer:aws-otel-collector-amd64-ver-0-45-0:2
      Policies:
        # Function's execution role
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
      Tracing: Active
      Timeout: 30
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get

  # We override log retention since by default there is no retention limit which
  # is both wasteful and expensive. This log group gets created by AWS Lambda
  # automatically, so we need to explicitly create it ourselves to ensure a sensible
  # retention period.
  LogsStockCheckerFunction:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${HelloWorldFunction}"
      RetentionInDays: 1

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
